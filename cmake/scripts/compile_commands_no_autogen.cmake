#[============================================================================[.rst

CompileCommandsNoAutogen
========================

.. warning::

  This file ain't a module, it's a script intended to be run with
  ``cmake -P path/to/this/file.cmake``.

#]============================================================================]

#### 0.) input and output file
set(_input ${CMAKE_BINARY_DIR}/compile_commands.json)
set(_output ${CMAKE_BINARY_DIR}/compile_commands_no_autogen.json)
# verify input file exists
if(NOT EXISTS ${_input} OR IS_DIRECTORY ${_input})
  message(FATAL_ERROR "${_input}: file not found")
endif()

#### 1.) read input file
file(READ ${_input} _input_json)
# escape [ and ] since otherwise CMake considers every semicolon between suqare
# brackets as part of the item and not as list separators 
string(REGEX REPLACE "\\[\n?" "~~~~>\n" _input_json ${_input_json})
string(REGEX REPLACE "\\]\n?" "<~~~~\n" _input_json ${_input_json})
# escape semicolons
string(REPLACE ";" "\\\\;" _input_json ${_input_json})
# split string into list of lines
string(REPLACE "\n" ";" _input_json_lines ${_input_json})

#### 2.) filter out auto-generated entries
foreach(_line IN LISTS _input_json_lines)
  # ignore blank lines
  if(_line STREQUAL "" OR _line MATCHES "^[\r\n\t ]+$")
    continue()
  endif()
  # handle JSON objects ({ ... }) is blocks
  if(_line STREQUAL "{")
    # a block starts with { ...
    set(_in_block True)
    set(_block "{")
  elseif(_line MATCHES "},?")
    # and ends with } or },
    set(_in_block False)
    set(_block "${_block}\n${CMAKE_MATCH_0}\n")
    # if the input file contains ".../nordvpn-gui_autogen/..." then the
    # file is auto-generated and gets ignored; files starting with mocs_ or qrc_
    # are generated by Qts moc and qrc tools respectively
    if(_block MATCHES ".*\"file\": \"[^\"]*/nordvpn-gui_autogen/[^\"]*\"" OR
       _block MATCHES ".*\"file\": \"[^\"]*/mocs_[^\"]*\"" OR
       _block MATCHES ".*\"file\": \"[^\"]*/qrc_[^\"]*\"")
      continue()
    endif()
    set(_output_json "${_output_json}\n${_block}")
  elseif(_line STREQUAL "~~~~>")
    # ~~~~> is the escape sequence for [
    set(_output_json "[")
  elseif(_line STREQUAL "<~~~~")
    # <~~~~ is the escape sequence for ]
    # remove trailing comma in array since this is invalid JSON syntax
    string(REGEX REPLACE ",\n*$" "" _output_json "${_output_json}")
    set(_output_json "${_output_json}\n]")
  else()
    # everything else belongs to the block
    if(_in_block)
    set(_block "${_block}\n${_line}")
    endif()
  endif()
endforeach()

#### 3.) write output file
file(WRITE ${_output} ${_output_json})
